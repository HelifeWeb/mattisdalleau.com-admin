---
version: '3.8'

services:

  # role == manager && requires storage sync (Global)
  hdci-traefik:

    deploy:
      mode: global
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.labels.hdci == true
      labels:
        - traefik.enable=true

        - traefik.http.routers.hdci-traefik-api.rule=Host(`${HDCI_TRAEFIK_SUBDOMAIN}.${HDCI_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
        - traefik.http.routers.hdci-traefik-api.entrypoints=websecure
        - traefik.http.routers.hdci-traefik-api.service=api@internal
        - traefik.http.routers.hdci-traefik-api.tls.certResolver=cloudflare
        - traefik.http.services.hdci-traefik-api.loadbalancer.server.port=8080

    networks:
      - ${HDCI_TRAEFIK_NETWORK_NAME}

    image: traefik:v3

    ports:
      - target: 80
        published: ${HDCI_TRAEFIK_WEB_PORT}
        mode: host
      - target: 443
        published: ${HDCI_TRAEFIK_WEBSECURE_PORT}
        mode: host

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

      - ${HDCI_FOLDER}/traefik/letsencrypt:/letsencrypt
      - ${HDCI_FOLDER}/traefik/logs:/var/log/traefik

      - ${HDCI_FOLDER}/static-configurations/traefik:/traefik-conf:ro
      - ${HDCI_FOLDER}/static-configurations/cloudflare:/cloudflare-api:ro
      - ${HDCI_FOLDER}/static-configurations/auth/rev-proxy:/authfiles:ro

    command:
      --entrypoints.web.address=:${HDCI_TRAEFIK_WEB_PORT}
      --entrypoints.websecure.address=:${HDCI_TRAEFIK_WEBSECURE_PORT}

      --configFile=/traefik-conf/conf.yaml

    environment:
      CF_API_EMAIL_FILE: /cloudflare-api/CLOUDFLARE_API_EMAIL
      CF_API_KEY_FILE: /cloudflare-api/CLOUDFLARE_API_KEY

  # Everyone (no constraints) (Global)
  hdci-whoami-traefik:

    deploy:
      mode: global
      restart_policy:
        condition: any
      labels:
        - traefik.enable=true
        - traefik.http.routers.hdci-whoami.rule=Host(`${HDCI_WHOAMI_SUBDOMAIN}.${HDCI_DOMAIN}`)
        - traefik.http.routers.hdci-whoami.entrypoints=websecure
        - traefik.http.routers.hdci-whoami.tls.certResolver=cloudflare
        - traefik.http.services.hdci-whoami.loadbalancer.server.port=80
    image: traefik/whoami:latest
    networks:
      - ${HDCI_TRAEFIK_NETWORK_NAME}

  # role >= worker && requires storage sync
  hdci-drone-server:

    deploy:
      mode: replicated
      replicas: ${DRONE_SERVER_REPLICAS:-1}
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.labels.hdci == true
      labels:
        - traefik.enable=true
        - traefik.http.routers.hdci-drone-entrypoints=websecure
        - traefik.http.routers.hdci-drone.rule=Host(`${HDCI_DRONE_SUBDOMAIN}.${HDCI_DOMAIN}`)
        - traefik.http.routers.hdci-drone.tls.certResolver=cloudflare
        - traefik.http.services.hdci-drone.loadbalancer.server.port=80

    image: drone/drone:2

    volumes:
      - ${HDCI_FOLDER}/drone/data:/data

    environment:
      DRONE_SERVER_HOST: ${HDCI_DRONE_SUBDOMAIN}.${HDCI_DOMAIN}
      DRONE_GITHUB_CLIENT_ID: ${DRONE_GITHUB_CLIENT_ID}
      DRONE_GITHUB_CLIENT_SECRET: ${DRONE_GITHUB_CLIENT_SECRET}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_USER_FILTER: ${DRONE_USER_FILTER}
      # Server
      DRONE_SERVER_PROTO: ${DRONE_SERVER_PROTO:-https}
      DRONE_TLS_AUTOCERT: ${DRONE_TLS_AUTOCERT:-true}
      DRONE_USER_CREATE: ${DRONE_USER_CREATE}
      DRONE_DATABASE_SECRET: ${DRONE_DATABASE_SECRET}
      # Logs
      DRONE_LOGS_DEBUG: ${DRONE_LOGS_DEBUG:-true}
      DRONE_LOGS_TEXT: ${DRONE_LOGS_TEXT:-true}
      DRONE_LOGS_PRETTY: ${DRONE_LOGS_PRETTY:-true}
      DRONE_LOGS_COLOR: ${DRONE_LOGS_COLOR:-true}
      DRONE_LOGS_TRACE: ${DRONE_LOGS_TRACE:-true}
      # Misc.
      TZ: ${DRONE_TZ:-Europe/Paris}

    networks:
      - ${HDCI_TRAEFIK_NETWORK_NAME}

  # role >= worker && requires registry auth
  hdci-drone-runner-docker:

    deploy:
      mode: replicated
      replicas: ${DRONE_RUNNER_REPLICAS:-1}
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.labels.hdci == true

    image: drone/drone-runner-docker:1

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    environment:
      DRONE_RPC_PROTO: https
      DRONE_RPC_HOST: ${HDCI_DRONE_SUBDOMAIN}.${HDCI_DOMAIN}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: ${DRONE_RUNNER_CAPACITY:-2}
      DRONE_RUNNER_NAME: hdci-drone-runner-docker

    networks:
      - ${HDCI_TRAEFIK_NETWORK_NAME}

  # role >= worker && requires storage sync
  hdci-registry:

    deploy:
      mode: replicated
      replicas: ${HDCI_REGISTRY_REPLICAS:-1}
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.labels.hdci == true

      labels:
        - traefik.enable=true
        - traefik.http.routers.hdci-registry.entrypoints=websecure
        - traefik.http.routers.hdci-registry.rule=Host(`${HDCI_REGISTRY_SUBDOMAIN}.${HDCI_DOMAIN}`)
        - traefik.http.routers.hdci-registry.tls.certResolver=cloudflare
        - traefik.http.services.hdci-registry.loadbalancer.server.port=5000

    image: registry:2

    environment:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry
      REGISTRY_AUTH_HTPASSWD_PATH: /registry/auth/.htpasswd
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /registry/data
      REGISTRY_HTTP_RELATIVEURLS: "true"

    volumes:
      - ${HDCI_FOLDER}/registry/:/registry
      - ${HDCI_FOLDER}/static-configurations/auth/private/registry:/registry/auth:ro

    networks:
      - ${HDCI_TRAEFIK_NETWORK_NAME}

  # role == manager && requires storage sync
  hdci-portainer:

    deploy:
      mode: replicated
      replicas: ${HDCI_PORTAINER_REPLICAS:-1}
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.labels.hdci == true
      labels:
        - traefik.enable=true
        - traefik.http.routers.hdci-portainer.rule=Host(`${HDCI_PORTAINER_SUBDOMAIN}.${HDCI_DOMAIN}`)
        - traefik.http.routers.hdci-portainer.entrypoints=websecure
        - traefik.http.routers.hdci-portainer.tls.certResolver=cloudflare
        - traefik.http.services.hdci-portainer.loadbalancer.server.port=9000

          #- traefik.http.routers.middlewares.hdci-portainer-auth.basicauth.usersfile=/authfiles/portainer/.htpasswd
          #- traefik.http.routers.hdci-portainer.middlewares=hdci-portainer-auth

    image: portainer/portainer-ce:latest

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HDCI_FOLDER}/portainer:/data

    environment:
      - PORTAINER_DOCKER_SOCKET=unix:///var/run/docker.sock

    networks:
      - ${HDCI_TRAEFIK_NETWORK_NAME}

networks:
  ${HDCI_TRAEFIK_NETWORK_NAME}:
    name: ${HDCI_TRAEFIK_NETWORK_NAME}
    external: true
